<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
namespace System {
	[Obsolete("Use Func<>.Curry() instead.")]
	public static class Curry {
<# for (int i = 1; i <= 16; i++) { #>
		[Obsolete("Use Func<>.Curry() instead.")]
		public static Curry<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> From<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> func) => func;
<# } #>
	}
<# for (int i = 1; i <= 16; i++) { #>

	[Obsolete("Use Func<>.Curry() instead.")]
	public class Curry<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> {
		private Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> Func { get; }

		public Curry(Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> func) {
			Func = func;
		}

<# for (int j = 1; j < i; j++) { #>
		public Curry<<# for (int k = j + 1; k <= i; k++) { #>T<#= k #>, <# } #>TResult> this[T1 arg1<# for (int k = 2; k <= j; k++) { #>, T<#= k #> arg<#= k #><# } #>] => new Curry<<# for (int k = j + 1; k <= i; k++) { #>T<#= k #>, <# } #>TResult>((arg<#= j + 1 #><# for (int k = j + 2; k <= i; k++) { #>, arg<#= k #><# } #>) => Func(arg1<# for (int k = 2; k <= i; k++) { #>, arg<#= k #><# } #>));
<# } #>
		public TResult this[T1 arg1<# for (int j = 2; j <= i; j++) { #>, T<#= j #> arg<#= j #><# } #>] => Func(arg1<# for (int j = 2; j <= i; j++) { #>, arg<#= j #><# } #>);
		public static implicit operator Curry<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> func) => new Curry<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(func);
		public static implicit operator Func<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult>(Curry<<# for (int j = 1; j <= i; j++) { #>T<#= j #>, <# } #>TResult> curry) => curry.Func;
	}
<# } #>
}